name: API Build and Deploy to GKE

on:
  push:
    branches:
      - main

env:
  GCP_PROJECT: gentle-habitat-425314-m2
  IMAGE_NAME: api-service
  DEPLOY_FILE: api-deployment.yml
  SERVICE_FOLDER: api-gateway
  IMAGE_TAG: ${{ github.sha }}

jobs:
  user-svc-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/api-gateway/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env: 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: api-gateway
          # Additional arguments for the sonarcloud scanner
          args:
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory
            -Dsonar.projectKey=moetez_moetez
            -Dsonar.organization=moetez
            -Dsonar.java.binaries=**/target/classes


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Google Container Registry
        uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Build Docker image
        run: docker build --tag gcr.io/${{ env.GCP_PROJECT }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ./${{ env.SERVICE_FOLDER }}

      - name: Push Docker image
        run: docker push gcr.io/${{ env.GCP_PROJECT }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Set up kubectl
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ env.GCP_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Get GKE credentials
        run: |
          gcloud components install kubectl
          gcloud container clusters get-credentials main-cluster --region us-central1

      - name: Deploy to GKE
        run: |
          kubectl apply -f k8s/${{ env.DEPLOY_FILE }}
          kubectl set image deployment/${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}=gcr.io/${{ env.GCP_PROJECT }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
