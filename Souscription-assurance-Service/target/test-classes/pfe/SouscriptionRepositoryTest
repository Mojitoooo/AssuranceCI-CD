/*package pfe.micro.assurance.repository;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;

import pfe.micro.assurance.entity.Souscription;

@ExtendWith(MockitoExtension.class)
@SpringBootTest
public class SouscriptionRepositoryTest {

    @Mock
    private SouscriptionRepository souscriptionRepository;

    @InjectMocks
    private SouscriptionService souscriptionService;

    @Test
    public void testFindSouscriptionBySouscriptionId() {
        // Mock the behavior of the repository
        when(souscriptionRepository.findSouscriptionBySouscriptionId(any(Integer.class)))
                .thenReturn(new Souscription(/* Your Souscription object here ));

        // Call the service method
        Souscription result = souscriptionService.findSouscriptionBySouscriptionId(1);

        // Assert the result
        assertThat(result).isNotNull();
        // Add more assertions based on your specific scenario
    }

    @Test
    public void testFindByUserId() {
        // Mock the behavior of the repository
        when(souscriptionRepository.findByUserId(any(String.class)))
                .thenReturn(Arrays.asList(new Souscription(/* Your Souscription object here )));

        // Call the service method
        List<Souscription> result = souscriptionService.findByUserId("user123");

        // Assert the result
        assertThat(result).isNotEmpty();
        // Add more assertions based on your specific scenario
    }

    @Test
    public void testFindByAssureurId() {
        // Mock the behavior of the repository
        when(souscriptionRepository.findByAssureurId(any(String.class)))
                .thenReturn(Arrays.asList(new Souscription(/* Your Souscription object here )));

        // Call the service method
        List<Souscription> result = souscriptionService.findByAssureurId("assureur123");

        // Assert the result
        assertThat(result).isNotEmpty();
        // Add more assertions based on your specific scenario
    }
} */
